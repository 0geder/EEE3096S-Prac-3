ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 1


   1              		.cpu cortex-m0
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB46:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include <stdint.h>
  25:Core/Src/main.c **** #include "stm32f0xx.h"
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** #define MAX_ITER 100
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 2


  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** // Add these stubs to silence warnings
  36:Core/Src/main.c **** int _close(int file) { return -1; }
  37:Core/Src/main.c **** int _lseek(int file, int ptr, int dir) { return 0; }
  38:Core/Src/main.c **** int _read(int file, char *ptr, int len) { return 0; }
  39:Core/Src/main.c **** int _write(int file, char *ptr, int len) { return len; }
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* USER CODE END PD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PM */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE BEGIN PV */
  51:Core/Src/main.c **** //TODO: Define and initialize the global variables required
  52:Core/Src/main.c **** // Setting the dimensions for the Mandelbrot calculation  
  53:Core/Src/main.c **** // change these values for each test run (128, 160, 192, 224, 256)
  54:Core/Src/main.c ****   const int IMAGE_WIDTH = 256; // Width of the image
  55:Core/Src/main.c ****   const int IMAGE_HEIGHT = 256; // Height of the image
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** // These variables store the timing information.
  58:Core/Src/main.c **** // HAL_GetTick() returns the number of milliseconds since the system started (32-bit unsigned integ
  59:Core/Src/main.c ****   uint32_t start_time = 0;
  60:Core/Src/main.c ****   uint32_t end_time = 0;
  61:Core/Src/main.c ****   uint32_t execution_time = 0;
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** // This variable will hold the checksum of the Mandelbrot calculation
  64:Core/Src/main.c ****   uint64_t checksum = 0; //: should be uint64_t
  65:Core/Src/main.c ****   //initial width and height maybe or you might opt for an array??
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** /* USER CODE END PV */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  71:Core/Src/main.c **** void SystemClock_Config(void);
  72:Core/Src/main.c **** static void MX_GPIO_Init(void);
  73:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  74:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations);
  75:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations);
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /* USER CODE END PFP */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  81:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** /* USER CODE END 0 */
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** /**
  86:Core/Src/main.c ****   * @brief  The application entry point.
  87:Core/Src/main.c ****   * @retval int
  88:Core/Src/main.c ****   */
  89:Core/Src/main.c **** int main(void)
  90:Core/Src/main.c **** {
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 3


  91:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c ****   /* USER CODE END 1 */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  98:Core/Src/main.c ****   HAL_Init();
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE END Init */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Configure the system clock */
 105:Core/Src/main.c ****   SystemClock_Config();
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* USER CODE END SysInit */
 110:Core/Src/main.c **** 
 111:Core/Src/main.c ****   /* Initialize all configured peripherals */
 112:Core/Src/main.c ****   MX_GPIO_Init();
 113:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 114:Core/Src/main.c ****   //TODO: Turn on LED 0 to signify the start of the operation
 115:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); 
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   //TODO: Record the start time
 118:Core/Src/main.c ****   start_time = HAL_GetTick();
 119:Core/Src/main.c ****   
 120:Core/Src/main.c ****   //TODO: Call the Mandelbrot Function and store the output in the checksum variable defined initia
 121:Core/Src/main.c ****   checksum = calculate_mandelbrot_fixed_point_arithmetic(IMAGE_WIDTH, IMAGE_HEIGHT, MAX_ITER);
 122:Core/Src/main.c ****   //checksum = calculate_mandelbrot_double(IMAGE_WIDTH, IMAGE_HEIGHT, MAX_ITER);
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   //TODO: Record the end time
 125:Core/Src/main.c ****   end_time = HAL_GetTick();
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   //TODO: Calculate the execution time
 128:Core/Src/main.c ****   execution_time = end_time - start_time;
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   //TODO: Turn on LED 1 to signify the end of the operation
 131:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 132:Core/Src/main.c **** 
 133:Core/Src/main.c ****   //TODO: Hold the LEDs on for a 1s delay
 134:Core/Src/main.c ****   HAL_Delay(1000);
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   //TODO: Turn off the LEDs
 137:Core/Src/main.c ****   // turn off LED 0 and LED 1
 138:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 139:Core/Src/main.c ****  
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /* USER CODE END 2 */
 142:Core/Src/main.c **** 
 143:Core/Src/main.c ****   /* Infinite loop */
 144:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 145:Core/Src/main.c ****   while (1)
 146:Core/Src/main.c ****   {
 147:Core/Src/main.c ****     /* USER CODE END WHILE */
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 4


 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 150:Core/Src/main.c ****   }
 151:Core/Src/main.c ****   /* USER CODE END 3 */
 152:Core/Src/main.c **** }
 153:Core/Src/main.c **** 
 154:Core/Src/main.c **** /**
 155:Core/Src/main.c ****   * @brief System Clock Configuration
 156:Core/Src/main.c ****   * @retval None
 157:Core/Src/main.c ****   */
 158:Core/Src/main.c **** void SystemClock_Config(void)
 159:Core/Src/main.c **** {
 160:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 161:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 164:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 165:Core/Src/main.c ****   */
 166:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 167:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 168:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 169:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 170:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 171:Core/Src/main.c ****   {
 172:Core/Src/main.c ****     Error_Handler();
 173:Core/Src/main.c ****   }
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 176:Core/Src/main.c ****   */
 177:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 178:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 179:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 180:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 181:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 184:Core/Src/main.c ****   {
 185:Core/Src/main.c ****     Error_Handler();
 186:Core/Src/main.c ****   }
 187:Core/Src/main.c **** }
 188:Core/Src/main.c **** 
 189:Core/Src/main.c **** /**
 190:Core/Src/main.c ****   * @brief GPIO Initialization Function
 191:Core/Src/main.c ****   * @param None
 192:Core/Src/main.c ****   * @retval None
 193:Core/Src/main.c ****   */
 194:Core/Src/main.c **** static void MX_GPIO_Init(void)
 195:Core/Src/main.c **** {
  26              		.loc 1 195 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 5


  35 0002 88B0     		sub	sp, sp, #32
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 40
 196:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 196 3 view .LVU1
  39              		.loc 1 196 20 is_stmt 0 view .LVU2
  40 0004 1422     		movs	r2, #20
  41 0006 0021     		movs	r1, #0
  42 0008 03A8     		add	r0, sp, #12
  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
 197:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 198:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 199:Core/Src/main.c **** 
 200:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 201:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  45              		.loc 1 201 3 is_stmt 1 view .LVU3
  46              	.LBB4:
  47              		.loc 1 201 3 view .LVU4
  48              		.loc 1 201 3 view .LVU5
  49 000e 134B     		ldr	r3, .L2
  50 0010 5A69     		ldr	r2, [r3, #20]
  51 0012 8021     		movs	r1, #128
  52 0014 C902     		lsls	r1, r1, #11
  53 0016 0A43     		orrs	r2, r1
  54 0018 5A61     		str	r2, [r3, #20]
  55              		.loc 1 201 3 view .LVU6
  56 001a 5A69     		ldr	r2, [r3, #20]
  57 001c 0A40     		ands	r2, r1
  58 001e 0192     		str	r2, [sp, #4]
  59              		.loc 1 201 3 view .LVU7
  60 0020 019A     		ldr	r2, [sp, #4]
  61              	.LBE4:
  62              		.loc 1 201 3 view .LVU8
 202:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  63              		.loc 1 202 3 view .LVU9
  64              	.LBB5:
  65              		.loc 1 202 3 view .LVU10
  66              		.loc 1 202 3 view .LVU11
  67 0022 5A69     		ldr	r2, [r3, #20]
  68 0024 8021     		movs	r1, #128
  69 0026 8902     		lsls	r1, r1, #10
  70 0028 0A43     		orrs	r2, r1
  71 002a 5A61     		str	r2, [r3, #20]
  72              		.loc 1 202 3 view .LVU12
  73 002c 5B69     		ldr	r3, [r3, #20]
  74 002e 0B40     		ands	r3, r1
  75 0030 0293     		str	r3, [sp, #8]
  76              		.loc 1 202 3 view .LVU13
  77 0032 029B     		ldr	r3, [sp, #8]
  78              	.LBE5:
  79              		.loc 1 202 3 view .LVU14
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 205:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
  80              		.loc 1 205 3 view .LVU15
  81 0034 0A4C     		ldr	r4, .L2+4
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 6


  82 0036 0022     		movs	r2, #0
  83 0038 0321     		movs	r1, #3
  84 003a 2000     		movs	r0, r4
  85 003c FFF7FEFF 		bl	HAL_GPIO_WritePin
  86              	.LVL1:
 206:Core/Src/main.c **** 
 207:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 */
 208:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  87              		.loc 1 208 3 view .LVU16
  88              		.loc 1 208 23 is_stmt 0 view .LVU17
  89 0040 0323     		movs	r3, #3
  90 0042 0393     		str	r3, [sp, #12]
 209:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  91              		.loc 1 209 3 is_stmt 1 view .LVU18
  92              		.loc 1 209 24 is_stmt 0 view .LVU19
  93 0044 023B     		subs	r3, r3, #2
  94 0046 0493     		str	r3, [sp, #16]
 210:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  95              		.loc 1 210 3 is_stmt 1 view .LVU20
  96              		.loc 1 210 24 is_stmt 0 view .LVU21
  97 0048 0023     		movs	r3, #0
  98 004a 0593     		str	r3, [sp, #20]
 211:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  99              		.loc 1 211 3 is_stmt 1 view .LVU22
 100              		.loc 1 211 25 is_stmt 0 view .LVU23
 101 004c 0693     		str	r3, [sp, #24]
 212:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 102              		.loc 1 212 3 is_stmt 1 view .LVU24
 103 004e 03A9     		add	r1, sp, #12
 104 0050 2000     		movs	r0, r4
 105 0052 FFF7FEFF 		bl	HAL_GPIO_Init
 106              	.LVL2:
 213:Core/Src/main.c **** 
 214:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 215:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 216:Core/Src/main.c **** }
 107              		.loc 1 216 1 is_stmt 0 view .LVU25
 108 0056 08B0     		add	sp, sp, #32
 109              		@ sp needed
 110 0058 10BD     		pop	{r4, pc}
 111              	.L3:
 112 005a C046     		.align	2
 113              	.L2:
 114 005c 00100240 		.word	1073876992
 115 0060 00040048 		.word	1207960576
 116              		.cfi_endproc
 117              	.LFE46:
 119              		.section	.text._close,"ax",%progbits
 120              		.align	1
 121              		.global	_close
 122              		.syntax unified
 123              		.code	16
 124              		.thumb_func
 126              	_close:
 127              	.LVL3:
 128              	.LFB40:
  36:Core/Src/main.c **** int _lseek(int file, int ptr, int dir) { return 0; }
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 7


 129              		.loc 1 36 22 is_stmt 1 view -0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 133              		@ link register save eliminated.
  36:Core/Src/main.c **** int _lseek(int file, int ptr, int dir) { return 0; }
 134              		.loc 1 36 24 view .LVU27
  36:Core/Src/main.c **** int _lseek(int file, int ptr, int dir) { return 0; }
 135              		.loc 1 36 31 is_stmt 0 discriminator 1 view .LVU28
 136 0000 0120     		movs	r0, #1
 137              	.LVL4:
  36:Core/Src/main.c **** int _lseek(int file, int ptr, int dir) { return 0; }
 138              		.loc 1 36 35 view .LVU29
 139 0002 4042     		rsbs	r0, r0, #0
 140              		@ sp needed
 141 0004 7047     		bx	lr
 142              		.cfi_endproc
 143              	.LFE40:
 145              		.section	.text._lseek,"ax",%progbits
 146              		.align	1
 147              		.global	_lseek
 148              		.syntax unified
 149              		.code	16
 150              		.thumb_func
 152              	_lseek:
 153              	.LVL5:
 154              	.LFB41:
  37:Core/Src/main.c **** int _read(int file, char *ptr, int len) { return 0; }
 155              		.loc 1 37 40 is_stmt 1 view -0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              		@ link register save eliminated.
  37:Core/Src/main.c **** int _read(int file, char *ptr, int len) { return 0; }
 160              		.loc 1 37 42 view .LVU31
  37:Core/Src/main.c **** int _read(int file, char *ptr, int len) { return 0; }
 161              		.loc 1 37 52 is_stmt 0 view .LVU32
 162 0000 0020     		movs	r0, #0
 163              	.LVL6:
  37:Core/Src/main.c **** int _read(int file, char *ptr, int len) { return 0; }
 164              		.loc 1 37 52 view .LVU33
 165              		@ sp needed
 166 0002 7047     		bx	lr
 167              		.cfi_endproc
 168              	.LFE41:
 170              		.section	.text._read,"ax",%progbits
 171              		.align	1
 172              		.global	_read
 173              		.syntax unified
 174              		.code	16
 175              		.thumb_func
 177              	_read:
 178              	.LVL7:
 179              	.LFB42:
  38:Core/Src/main.c **** int _write(int file, char *ptr, int len) { return len; }
 180              		.loc 1 38 41 is_stmt 1 view -0
 181              		.cfi_startproc
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 8


 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184              		@ link register save eliminated.
  38:Core/Src/main.c **** int _write(int file, char *ptr, int len) { return len; }
 185              		.loc 1 38 43 view .LVU35
  38:Core/Src/main.c **** int _write(int file, char *ptr, int len) { return len; }
 186              		.loc 1 38 53 is_stmt 0 view .LVU36
 187 0000 0020     		movs	r0, #0
 188              	.LVL8:
  38:Core/Src/main.c **** int _write(int file, char *ptr, int len) { return len; }
 189              		.loc 1 38 53 view .LVU37
 190              		@ sp needed
 191 0002 7047     		bx	lr
 192              		.cfi_endproc
 193              	.LFE42:
 195              		.section	.text._write,"ax",%progbits
 196              		.align	1
 197              		.global	_write
 198              		.syntax unified
 199              		.code	16
 200              		.thumb_func
 202              	_write:
 203              	.LVL9:
 204              	.LFB43:
  39:Core/Src/main.c **** 
 205              		.loc 1 39 42 is_stmt 1 view -0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              		@ link register save eliminated.
  39:Core/Src/main.c **** 
 210              		.loc 1 39 42 is_stmt 0 view .LVU39
 211 0000 1000     		movs	r0, r2
 212              	.LVL10:
  39:Core/Src/main.c **** 
 213              		.loc 1 39 44 is_stmt 1 view .LVU40
  39:Core/Src/main.c **** 
 214              		.loc 1 39 56 is_stmt 0 view .LVU41
 215              		@ sp needed
 216 0002 7047     		bx	lr
 217              		.cfi_endproc
 218              	.LFE43:
 220              		.global	__aeabi_lmul
 221              		.global	__aeabi_ldivmod
 222              		.section	.text.calculate_mandelbrot_fixed_point_arithmetic,"ax",%progbits
 223              		.align	1
 224              		.global	calculate_mandelbrot_fixed_point_arithmetic
 225              		.syntax unified
 226              		.code	16
 227              		.thumb_func
 229              	calculate_mandelbrot_fixed_point_arithmetic:
 230              	.LVL11:
 231              	.LFB47:
 217:Core/Src/main.c **** 
 218:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 219:Core/Src/main.c **** //TODO: Mandelbrot using variable type integers and fixed point arithmetic
 220:Core/Src/main.c **** uint64_t calculate_mandelbrot_fixed_point_arithmetic(int width, int height, int max_iterations){
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 9


 232              		.loc 1 220 96 is_stmt 1 view -0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 72
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236              		.loc 1 220 96 is_stmt 0 view .LVU43
 237 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 238              	.LCFI2:
 239              		.cfi_def_cfa_offset 20
 240              		.cfi_offset 4, -20
 241              		.cfi_offset 5, -16
 242              		.cfi_offset 6, -12
 243              		.cfi_offset 7, -8
 244              		.cfi_offset 14, -4
 245 0002 DE46     		mov	lr, fp
 246 0004 5746     		mov	r7, r10
 247 0006 4E46     		mov	r6, r9
 248 0008 4546     		mov	r5, r8
 249 000a E0B5     		push	{r5, r6, r7, lr}
 250              	.LCFI3:
 251              		.cfi_def_cfa_offset 36
 252              		.cfi_offset 8, -36
 253              		.cfi_offset 9, -32
 254              		.cfi_offset 10, -28
 255              		.cfi_offset 11, -24
 256 000c 93B0     		sub	sp, sp, #76
 257              	.LCFI4:
 258              		.cfi_def_cfa_offset 112
 259 000e 8346     		mov	fp, r0
 260 0010 1191     		str	r1, [sp, #68]
 221:Core/Src/main.c ****   uint64_t mandelbrot_sum = 0;
 261              		.loc 1 221 3 is_stmt 1 view .LVU44
 262              	.LVL12:
 222:Core/Src/main.c ****     //TODO: Complete the function implementation
 223:Core/Src/main.c ****     
 224:Core/Src/main.c ****     const int64_t SCALE = 1000000; // Scale factor for fixed-point arithmetic
 263              		.loc 1 224 5 view .LVU45
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****     const int64_t LIMIT = 4 * SCALE * SCALE; // Limit for the escape condition (|z|^2 < 4)
 264              		.loc 1 226 5 view .LVU46
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****     for (int y = 0; y < height; y++){
 265              		.loc 1 228 5 view .LVU47
 266              	.LBB6:
 267              		.loc 1 228 10 view .LVU48
 268              		.loc 1 228 14 is_stmt 0 view .LVU49
 269 0012 0023     		movs	r3, #0
 270 0014 1093     		str	r3, [sp, #64]
 271              	.LBE6:
 221:Core/Src/main.c ****     //TODO: Complete the function implementation
 272              		.loc 1 221 12 view .LVU50
 273 0016 0023     		movs	r3, #0
 274 0018 0024     		movs	r4, #0
 275 001a 0E93     		str	r3, [sp, #56]
 276 001c 0F94     		str	r4, [sp, #60]
 277 001e 0592     		str	r2, [sp, #20]
 278              	.LBB13:
 279              		.loc 1 228 5 view .LVU51
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 10


 280 0020 85E0     		b	.L9
 281              	.LVL13:
 282              	.L17:
 283              	.LBB7:
 284              	.LBB8:
 285              	.LBB9:
 229:Core/Src/main.c ****       for (int x = 0; x < width; x++){
 230:Core/Src/main.c ****         // Map pixel coordinate to complex plane (c = c_real + i*c_imag)
 231:Core/Src/main.c ****             // c_real = (x / width) * 3.5 - 2.5
 232:Core/Src/main.c ****             // c_imag = (y / height) * 2.0 - 1.0
 233:Core/Src/main.c ****             // Using 64-bit integers to prevent overflow during intermediate multiplication.
 234:Core/Src/main.c ****             int64_t c_real = ((int64_t)x * 3500000) / width - 2500000;
 235:Core/Src/main.c ****             int64_t c_imag = ((int64_t)y * 2000000) / height - 1000000;
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****             int64_t z_real = 0;
 238:Core/Src/main.c ****             int64_t z_imag = 0;
 239:Core/Src/main.c ****             int iteration = 0;
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****             while (iteration < max_iterations) {
 242:Core/Src/main.c ****                 int64_t z_real_sq = z_real * z_real;
 243:Core/Src/main.c ****                 int64_t z_imag_sq = z_imag * z_imag;
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****                 // Check for divergence
 246:Core/Src/main.c ****                 if ((z_real_sq + z_imag_sq) > LIMIT) {
 247:Core/Src/main.c ****                     break;
 248:Core/Src/main.c ****                 }
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****                 // Iterate z_new = z^2 + c
 251:Core/Src/main.c ****                 // z_imag_new = 2 * z_real * z_imag + c_imag
 252:Core/Src/main.c ****                 // The term 2*z_real*z_imag is scaled by SCALE^2, so we divide by SCALE
 253:Core/Src/main.c ****                 // to bring it back to a number scaled by SCALE.
 254:Core/Src/main.c ****                 int64_t z_imag_new = (2 * z_real * z_imag) / SCALE + c_imag;
 286              		.loc 1 254 17 is_stmt 1 view .LVU52
 287              		.loc 1 254 50 is_stmt 0 view .LVU53
 288 0022 3200     		movs	r2, r6
 289 0024 3B00     		movs	r3, r7
 290 0026 2000     		movs	r0, r4
 291              	.LVL14:
 292              		.loc 1 254 50 view .LVU54
 293 0028 2900     		movs	r1, r5
 294 002a FFF7FEFF 		bl	__aeabi_lmul
 295              	.LVL15:
 296              		.loc 1 254 60 view .LVU55
 297 002e 4A4A     		ldr	r2, .L20
 298 0030 0023     		movs	r3, #0
 299 0032 FFF7FEFF 		bl	__aeabi_ldivmod
 300              	.LVL16:
 301              		.loc 1 254 25 view .LVU56
 302 0036 089E     		ldr	r6, [sp, #32]
 303 0038 099F     		ldr	r7, [sp, #36]
 304              	.LVL17:
 305              		.loc 1 254 25 view .LVU57
 306 003a 3618     		adds	r6, r6, r0
 307 003c 4F41     		adcs	r7, r7, r1
 308              	.LVL18:
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****                 // z_real_new = z_real^2 - z_imag^2 + c_real
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 11


 257:Core/Src/main.c ****                 // The term (z_real^2 - z_imag^2) is also scaled by SCALE^2, divide by SCALE.
 258:Core/Src/main.c ****                 int64_t z_real_new = (z_real_sq - z_imag_sq) / SCALE + c_real;
 309              		.loc 1 258 17 is_stmt 1 view .LVU58
 310              		.loc 1 258 49 is_stmt 0 view .LVU59
 311 003e 0098     		ldr	r0, [sp]
 312 0040 0199     		ldr	r1, [sp, #4]
 313 0042 029B     		ldr	r3, [sp, #8]
 314 0044 039C     		ldr	r4, [sp, #12]
 315 0046 C01A     		subs	r0, r0, r3
 316 0048 A141     		sbcs	r1, r1, r4
 317              		.loc 1 258 62 view .LVU60
 318 004a 444A     		ldr	r2, .L20+4
 319 004c 0023     		movs	r3, #0
 320 004e FFF7FEFF 		bl	__aeabi_ldivmod
 321              	.LVL19:
 322              		.loc 1 258 25 view .LVU61
 323 0052 069C     		ldr	r4, [sp, #24]
 324 0054 079D     		ldr	r5, [sp, #28]
 325              	.LVL20:
 326              		.loc 1 258 25 view .LVU62
 327 0056 2418     		adds	r4, r4, r0
 328 0058 4D41     		adcs	r5, r5, r1
 329              	.LVL21:
 259:Core/Src/main.c **** 
 260:Core/Src/main.c ****                 z_real = z_real_new;
 330              		.loc 1 260 17 is_stmt 1 view .LVU63
 261:Core/Src/main.c ****                 z_imag = z_imag_new;
 331              		.loc 1 261 17 view .LVU64
 262:Core/Src/main.c **** 
 263:Core/Src/main.c ****                 iteration++;
 332              		.loc 1 263 17 view .LVU65
 333              		.loc 1 263 26 is_stmt 0 view .LVU66
 334 005a 0123     		movs	r3, #1
 335 005c 9C46     		mov	ip, r3
 336 005e E044     		add	r8, r8, ip
 337              	.LVL22:
 338              	.L10:
 339              		.loc 1 263 26 view .LVU67
 340              	.LBE9:
 241:Core/Src/main.c ****                 int64_t z_real_sq = z_real * z_real;
 341              		.loc 1 241 30 is_stmt 1 view .LVU68
 342 0060 059B     		ldr	r3, [sp, #20]
 343 0062 9845     		cmp	r8, r3
 344 0064 22DA     		bge	.L11
 345              	.LBB10:
 242:Core/Src/main.c ****                 int64_t z_imag_sq = z_imag * z_imag;
 346              		.loc 1 242 17 view .LVU69
 242:Core/Src/main.c ****                 int64_t z_imag_sq = z_imag * z_imag;
 347              		.loc 1 242 25 is_stmt 0 view .LVU70
 348 0066 2200     		movs	r2, r4
 349 0068 2B00     		movs	r3, r5
 350 006a 2000     		movs	r0, r4
 351 006c 2900     		movs	r1, r5
 352 006e FFF7FEFF 		bl	__aeabi_lmul
 353              	.LVL23:
 354 0072 0090     		str	r0, [sp]
 355 0074 0191     		str	r1, [sp, #4]
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 12


 356              	.LVL24:
 243:Core/Src/main.c **** 
 357              		.loc 1 243 17 is_stmt 1 view .LVU71
 243:Core/Src/main.c **** 
 358              		.loc 1 243 25 is_stmt 0 view .LVU72
 359 0076 3200     		movs	r2, r6
 360 0078 3B00     		movs	r3, r7
 361 007a 3000     		movs	r0, r6
 362 007c 3900     		movs	r1, r7
 363 007e FFF7FEFF 		bl	__aeabi_lmul
 364              	.LVL25:
 365 0082 0290     		str	r0, [sp, #8]
 366 0084 0391     		str	r1, [sp, #12]
 367              	.LVL26:
 246:Core/Src/main.c ****                     break;
 368              		.loc 1 246 17 is_stmt 1 view .LVU73
 246:Core/Src/main.c ****                     break;
 369              		.loc 1 246 32 is_stmt 0 view .LVU74
 370 0086 009A     		ldr	r2, [sp]
 371 0088 019B     		ldr	r3, [sp, #4]
 372 008a 0298     		ldr	r0, [sp, #8]
 373 008c 0399     		ldr	r1, [sp, #12]
 374 008e 1218     		adds	r2, r2, r0
 375 0090 4B41     		adcs	r3, r3, r1
 376 0092 0A92     		str	r2, [sp, #40]
 377 0094 0B93     		str	r3, [sp, #44]
 246:Core/Src/main.c ****                     break;
 378              		.loc 1 246 20 view .LVU75
 379 0096 E921     		movs	r1, #233
 380 0098 8900     		lsls	r1, r1, #2
 381 009a 8B42     		cmp	r3, r1
 382 009c 06DA     		bge	.L11
 383 009e 3049     		ldr	r1, .L20+8
 384 00a0 8B42     		cmp	r3, r1
 385 00a2 BED1     		bne	.L17
 386 00a4 2F4B     		ldr	r3, .L20+12
 387 00a6 0A9A     		ldr	r2, [sp, #40]
 388 00a8 9A42     		cmp	r2, r3
 389 00aa BAD9     		bls	.L17
 390              	.LVL27:
 391              	.L11:
 246:Core/Src/main.c ****                     break;
 392              		.loc 1 246 20 view .LVU76
 393              	.LBE10:
 264:Core/Src/main.c ****       }
 265:Core/Src/main.c ****       mandelbrot_sum += iteration;
 394              		.loc 1 265 22 view .LVU77
 395 00ac 4346     		mov	r3, r8
 396              		.loc 1 265 7 is_stmt 1 view .LVU78
 397              		.loc 1 265 22 is_stmt 0 view .LVU79
 398 00ae 0C93     		str	r3, [sp, #48]
 399 00b0 DB17     		asrs	r3, r3, #31
 400 00b2 0D93     		str	r3, [sp, #52]
 401 00b4 0E9B     		ldr	r3, [sp, #56]
 402 00b6 0F9C     		ldr	r4, [sp, #60]
 403 00b8 0C99     		ldr	r1, [sp, #48]
 404 00ba 0D9A     		ldr	r2, [sp, #52]
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 13


 405 00bc 5B18     		adds	r3, r3, r1
 406 00be 5441     		adcs	r4, r4, r2
 407 00c0 0E93     		str	r3, [sp, #56]
 408 00c2 0F94     		str	r4, [sp, #60]
 409              	.LVL28:
 410              		.loc 1 265 22 view .LVU80
 411              	.LBE8:
 229:Core/Src/main.c ****         // Map pixel coordinate to complex plane (c = c_real + i*c_imag)
 412              		.loc 1 229 35 is_stmt 1 discriminator 2 view .LVU81
 413 00c4 0123     		movs	r3, #1
 414              	.LVL29:
 229:Core/Src/main.c ****         // Map pixel coordinate to complex plane (c = c_real + i*c_imag)
 415              		.loc 1 229 35 is_stmt 0 discriminator 2 view .LVU82
 416 00c6 9C46     		mov	ip, r3
 417 00c8 E344     		add	fp, fp, ip
 418              	.LVL30:
 419              	.L15:
 229:Core/Src/main.c ****         // Map pixel coordinate to complex plane (c = c_real + i*c_imag)
 420              		.loc 1 229 25 is_stmt 1 discriminator 1 view .LVU83
 421 00ca D345     		cmp	fp, r10
 422 00cc 2BDA     		bge	.L18
 423              	.LBB11:
 234:Core/Src/main.c ****             int64_t c_imag = ((int64_t)y * 2000000) / height - 1000000;
 424              		.loc 1 234 13 view .LVU84
 234:Core/Src/main.c ****             int64_t c_imag = ((int64_t)y * 2000000) / height - 1000000;
 425              		.loc 1 234 31 is_stmt 0 view .LVU85
 426 00ce 5B46     		mov	r3, fp
 427 00d0 D917     		asrs	r1, r3, #31
 234:Core/Src/main.c ****             int64_t c_imag = ((int64_t)y * 2000000) / height - 1000000;
 428              		.loc 1 234 42 view .LVU86
 429 00d2 254A     		ldr	r2, .L20+16
 430 00d4 0023     		movs	r3, #0
 431 00d6 5846     		mov	r0, fp
 432 00d8 FFF7FEFF 		bl	__aeabi_lmul
 433              	.LVL31:
 234:Core/Src/main.c ****             int64_t c_imag = ((int64_t)y * 2000000) / height - 1000000;
 434              		.loc 1 234 53 view .LVU87
 435 00dc 5346     		mov	r3, r10
 436 00de DB17     		asrs	r3, r3, #31
 437 00e0 5246     		mov	r2, r10
 438 00e2 FFF7FEFF 		bl	__aeabi_ldivmod
 439              	.LVL32:
 234:Core/Src/main.c ****             int64_t c_imag = ((int64_t)y * 2000000) / height - 1000000;
 440              		.loc 1 234 21 view .LVU88
 441 00e6 214A     		ldr	r2, .L20+20
 442 00e8 0123     		movs	r3, #1
 443 00ea 5B42     		rsbs	r3, r3, #0
 444 00ec 8018     		adds	r0, r0, r2
 445 00ee 5941     		adcs	r1, r1, r3
 446 00f0 0690     		str	r0, [sp, #24]
 447 00f2 0791     		str	r1, [sp, #28]
 448              	.LVL33:
 235:Core/Src/main.c **** 
 449              		.loc 1 235 13 is_stmt 1 view .LVU89
 235:Core/Src/main.c **** 
 450              		.loc 1 235 31 is_stmt 0 view .LVU90
 451 00f4 1098     		ldr	r0, [sp, #64]
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 14


 452              	.LVL34:
 235:Core/Src/main.c **** 
 453              		.loc 1 235 31 view .LVU91
 454 00f6 C117     		asrs	r1, r0, #31
 235:Core/Src/main.c **** 
 455              		.loc 1 235 42 view .LVU92
 456 00f8 1D4A     		ldr	r2, .L20+24
 457 00fa 0023     		movs	r3, #0
 458 00fc FFF7FEFF 		bl	__aeabi_lmul
 459              	.LVL35:
 235:Core/Src/main.c **** 
 460              		.loc 1 235 53 view .LVU93
 461 0100 4B46     		mov	r3, r9
 462 0102 DB17     		asrs	r3, r3, #31
 463 0104 4A46     		mov	r2, r9
 464 0106 FFF7FEFF 		bl	__aeabi_ldivmod
 465              	.LVL36:
 235:Core/Src/main.c **** 
 466              		.loc 1 235 21 view .LVU94
 467 010a 1A4A     		ldr	r2, .L20+28
 468 010c 0123     		movs	r3, #1
 469 010e 5B42     		rsbs	r3, r3, #0
 470 0110 8018     		adds	r0, r0, r2
 471 0112 5941     		adcs	r1, r1, r3
 472 0114 0890     		str	r0, [sp, #32]
 473 0116 0991     		str	r1, [sp, #36]
 474              	.LVL37:
 237:Core/Src/main.c ****             int64_t z_imag = 0;
 475              		.loc 1 237 13 is_stmt 1 view .LVU95
 238:Core/Src/main.c ****             int iteration = 0;
 476              		.loc 1 238 13 view .LVU96
 239:Core/Src/main.c **** 
 477              		.loc 1 239 13 view .LVU97
 241:Core/Src/main.c ****                 int64_t z_real_sq = z_real * z_real;
 478              		.loc 1 241 13 view .LVU98
 239:Core/Src/main.c **** 
 479              		.loc 1 239 17 is_stmt 0 view .LVU99
 480 0118 0023     		movs	r3, #0
 238:Core/Src/main.c ****             int iteration = 0;
 481              		.loc 1 238 21 view .LVU100
 482 011a 0026     		movs	r6, #0
 483 011c 0027     		movs	r7, #0
 237:Core/Src/main.c ****             int64_t z_imag = 0;
 484              		.loc 1 237 21 view .LVU101
 485 011e 0024     		movs	r4, #0
 486 0120 0025     		movs	r5, #0
 487 0122 9846     		mov	r8, r3
 241:Core/Src/main.c ****                 int64_t z_real_sq = z_real * z_real;
 488              		.loc 1 241 19 view .LVU102
 489 0124 9CE7     		b	.L10
 490              	.LVL38:
 491              	.L18:
 241:Core/Src/main.c ****                 int64_t z_real_sq = z_real * z_real;
 492              		.loc 1 241 19 view .LVU103
 493              	.LBE11:
 494              	.LBE7:
 228:Core/Src/main.c ****       for (int x = 0; x < width; x++){
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 15


 495              		.loc 1 228 34 discriminator 2 view .LVU104
 496 0126 D346     		mov	fp, r10
 497              	.LVL39:
 228:Core/Src/main.c ****       for (int x = 0; x < width; x++){
 498              		.loc 1 228 34 is_stmt 1 discriminator 2 view .LVU105
 499 0128 109B     		ldr	r3, [sp, #64]
 500 012a 0133     		adds	r3, r3, #1
 501 012c 1093     		str	r3, [sp, #64]
 502              	.LVL40:
 503              	.L9:
 228:Core/Src/main.c ****       for (int x = 0; x < width; x++){
 504              		.loc 1 228 23 discriminator 1 view .LVU106
 505 012e 109B     		ldr	r3, [sp, #64]
 506 0130 119A     		ldr	r2, [sp, #68]
 507 0132 9342     		cmp	r3, r2
 508 0134 07DA     		bge	.L19
 509              	.LBB12:
 229:Core/Src/main.c ****         // Map pixel coordinate to complex plane (c = c_real + i*c_imag)
 510              		.loc 1 229 16 is_stmt 0 view .LVU107
 511 0136 0023     		movs	r3, #0
 512 0138 9A46     		mov	r10, r3
 513 013a 5B46     		mov	r3, fp
 514 013c D346     		mov	fp, r10
 515              	.LVL41:
 229:Core/Src/main.c ****         // Map pixel coordinate to complex plane (c = c_real + i*c_imag)
 516              		.loc 1 229 16 view .LVU108
 517 013e 119A     		ldr	r2, [sp, #68]
 518 0140 9146     		mov	r9, r2
 519 0142 9A46     		mov	r10, r3
 520 0144 C1E7     		b	.L15
 521              	.LVL42:
 522              	.L19:
 229:Core/Src/main.c ****         // Map pixel coordinate to complex plane (c = c_real + i*c_imag)
 523              		.loc 1 229 16 view .LVU109
 524              	.LBE12:
 525              	.LBE13:
 266:Core/Src/main.c ****     }
 267:Core/Src/main.c ****   }
 268:Core/Src/main.c ****     return mandelbrot_sum;
 526              		.loc 1 268 5 is_stmt 1 view .LVU110
 269:Core/Src/main.c **** 
 270:Core/Src/main.c **** }
 527              		.loc 1 270 1 is_stmt 0 view .LVU111
 528 0146 0E98     		ldr	r0, [sp, #56]
 529 0148 0F99     		ldr	r1, [sp, #60]
 530 014a 13B0     		add	sp, sp, #76
 531              		@ sp needed
 532              	.LVL43:
 533              		.loc 1 270 1 view .LVU112
 534 014c F0BC     		pop	{r4, r5, r6, r7}
 535 014e BB46     		mov	fp, r7
 536 0150 B246     		mov	r10, r6
 537 0152 A946     		mov	r9, r5
 538 0154 A046     		mov	r8, r4
 539 0156 F0BD     		pop	{r4, r5, r6, r7, pc}
 540              	.L21:
 541              		.align	2
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 16


 542              	.L20:
 543 0158 20A10700 		.word	500000
 544 015c 40420F00 		.word	1000000
 545 0160 A3030000 		.word	931
 546 0164 00409452 		.word	1385447424
 547 0168 E0673500 		.word	3500000
 548 016c 60DAD9FF 		.word	-2500000
 549 0170 80841E00 		.word	2000000
 550 0174 C0BDF0FF 		.word	-1000000
 551              		.cfi_endproc
 552              	.LFE47:
 554              		.global	__aeabi_i2d
 555              		.global	__aeabi_ddiv
 556              		.global	__aeabi_dmul
 557              		.global	__aeabi_dsub
 558              		.global	__aeabi_dadd
 559              		.global	__aeabi_dcmple
 560              		.section	.text.calculate_mandelbrot_double,"ax",%progbits
 561              		.align	1
 562              		.global	calculate_mandelbrot_double
 563              		.syntax unified
 564              		.code	16
 565              		.thumb_func
 567              	calculate_mandelbrot_double:
 568              	.LVL44:
 569              	.LFB48:
 271:Core/Src/main.c **** 
 272:Core/Src/main.c **** //TODO: Mandelbroat using variable type double
 273:Core/Src/main.c **** uint64_t calculate_mandelbrot_double(int width, int height, int max_iterations){
 570              		.loc 1 273 80 is_stmt 1 view -0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 64
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574              		.loc 1 273 80 is_stmt 0 view .LVU114
 575 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 576              	.LCFI5:
 577              		.cfi_def_cfa_offset 20
 578              		.cfi_offset 4, -20
 579              		.cfi_offset 5, -16
 580              		.cfi_offset 6, -12
 581              		.cfi_offset 7, -8
 582              		.cfi_offset 14, -4
 583 0002 DE46     		mov	lr, fp
 584 0004 5746     		mov	r7, r10
 585 0006 4E46     		mov	r6, r9
 586 0008 4546     		mov	r5, r8
 587 000a E0B5     		push	{r5, r6, r7, lr}
 588              	.LCFI6:
 589              		.cfi_def_cfa_offset 36
 590              		.cfi_offset 8, -36
 591              		.cfi_offset 9, -32
 592              		.cfi_offset 10, -28
 593              		.cfi_offset 11, -24
 594 000c 91B0     		sub	sp, sp, #68
 595              	.LCFI7:
 596              		.cfi_def_cfa_offset 104
 597 000e 0F91     		str	r1, [sp, #60]
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 17


 598 0010 9146     		mov	r9, r2
 274:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 599              		.loc 1 274 5 is_stmt 1 view .LVU115
 600              	.LVL45:
 275:Core/Src/main.c ****     //TODO: Complete the function implementation
 276:Core/Src/main.c ****     for (int y = 0; y < height; y++) {
 601              		.loc 1 276 5 view .LVU116
 602              	.LBB14:
 603              		.loc 1 276 10 view .LVU117
 604              		.loc 1 276 14 is_stmt 0 view .LVU118
 605 0012 0023     		movs	r3, #0
 606 0014 0E93     		str	r3, [sp, #56]
 607              	.LBE14:
 274:Core/Src/main.c ****     uint64_t mandelbrot_sum = 0;
 608              		.loc 1 274 14 view .LVU119
 609 0016 0023     		movs	r3, #0
 610 0018 0024     		movs	r4, #0
 611 001a 0C93     		str	r3, [sp, #48]
 612 001c 0D94     		str	r4, [sp, #52]
 613 001e 0B90     		str	r0, [sp, #44]
 614              	.LBB20:
 615              		.loc 1 276 5 view .LVU120
 616 0020 8BE0     		b	.L23
 617              	.LVL46:
 618              	.L26:
 619              	.LBB15:
 620              	.LBB16:
 621              	.LBB17:
 277:Core/Src/main.c ****         for (int x = 0; x < width; x++) {
 278:Core/Src/main.c ****             // Map pixel coordinate to complex plane (c = c_real + i*c_imag)
 279:Core/Src/main.c ****             double c_real = ((double)x / width) * 3.5 - 2.5;
 280:Core/Src/main.c ****             double c_imag = ((double)y / height) * 2.0 - 1.0;
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****             double z_real = 0.0;
 283:Core/Src/main.c ****             double z_imag = 0.0;
 284:Core/Src/main.c ****             int iteration = 0;
 285:Core/Src/main.c **** 
 286:Core/Src/main.c ****             // Iterate z_new = z^2 + c until |z| > 2 or max_iterations is reached.
 287:Core/Src/main.c ****             while (iteration < max_iterations && (z_real * z_real + z_imag * z_imag) <= 4.0) {
 288:Core/Src/main.c ****                 // We use a temporary variable for the new real part to ensure the new
 289:Core/Src/main.c ****                 // imaginary part is calculated using the old real part.
 290:Core/Src/main.c ****                 double z_real_new = z_real * z_real - z_imag * z_imag + c_real;
 622              		.loc 1 290 17 is_stmt 1 view .LVU121
 623              		.loc 1 290 53 is_stmt 0 view .LVU122
 624 0022 029A     		ldr	r2, [sp, #8]
 625 0024 039B     		ldr	r3, [sp, #12]
 626 0026 0098     		ldr	r0, [sp]
 627 0028 0199     		ldr	r1, [sp, #4]
 628 002a FFF7FEFF 		bl	__aeabi_dsub
 629              	.LVL47:
 630              		.loc 1 290 24 view .LVU123
 631 002e 049A     		ldr	r2, [sp, #16]
 632 0030 059B     		ldr	r3, [sp, #20]
 633 0032 FFF7FEFF 		bl	__aeabi_dadd
 634              	.LVL48:
 635 0036 0090     		str	r0, [sp]
 636 0038 0191     		str	r1, [sp, #4]
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 18


 637              	.LVL49:
 291:Core/Src/main.c ****                 z_imag = 2 * z_real * z_imag + c_imag;
 638              		.loc 1 291 17 is_stmt 1 view .LVU124
 639              		.loc 1 291 28 is_stmt 0 view .LVU125
 640 003a 2200     		movs	r2, r4
 641 003c 2B00     		movs	r3, r5
 642 003e 2000     		movs	r0, r4
 643              	.LVL50:
 644              		.loc 1 291 28 view .LVU126
 645 0040 2900     		movs	r1, r5
 646 0042 FFF7FEFF 		bl	__aeabi_dadd
 647              	.LVL51:
 648              		.loc 1 291 37 view .LVU127
 649 0046 3200     		movs	r2, r6
 650 0048 3B00     		movs	r3, r7
 651 004a FFF7FEFF 		bl	__aeabi_dmul
 652              	.LVL52:
 653              		.loc 1 291 24 view .LVU128
 654 004e 069A     		ldr	r2, [sp, #24]
 655 0050 079B     		ldr	r3, [sp, #28]
 656 0052 FFF7FEFF 		bl	__aeabi_dadd
 657              	.LVL53:
 658 0056 0600     		movs	r6, r0
 659              	.LVL54:
 660              		.loc 1 291 24 view .LVU129
 661 0058 0F00     		movs	r7, r1
 662              	.LVL55:
 292:Core/Src/main.c ****                 z_real = z_real_new;
 663              		.loc 1 292 17 is_stmt 1 view .LVU130
 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****                 iteration++;
 664              		.loc 1 294 17 view .LVU131
 665              		.loc 1 294 26 is_stmt 0 view .LVU132
 666 005a 0123     		movs	r3, #1
 667 005c 9C46     		mov	ip, r3
 668 005e E044     		add	r8, r8, ip
 669              	.LVL56:
 292:Core/Src/main.c ****                 z_real = z_real_new;
 670              		.loc 1 292 24 view .LVU133
 671 0060 009C     		ldr	r4, [sp]
 672 0062 019D     		ldr	r5, [sp, #4]
 673              	.LVL57:
 674              	.L24:
 292:Core/Src/main.c ****                 z_real = z_real_new;
 675              		.loc 1 292 24 view .LVU134
 676              	.LBE17:
 287:Core/Src/main.c ****                 // We use a temporary variable for the new real part to ensure the new
 677              		.loc 1 287 47 is_stmt 1 view .LVU135
 678 0064 C845     		cmp	r8, r9
 679 0066 1BDA     		bge	.L25
 287:Core/Src/main.c ****                 // We use a temporary variable for the new real part to ensure the new
 680              		.loc 1 287 58 is_stmt 0 discriminator 1 view .LVU136
 681 0068 2200     		movs	r2, r4
 682 006a 2B00     		movs	r3, r5
 683 006c 2000     		movs	r0, r4
 684 006e 2900     		movs	r1, r5
 685 0070 FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 19


 686              	.LVL58:
 687 0074 0090     		str	r0, [sp]
 688 0076 0191     		str	r1, [sp, #4]
 287:Core/Src/main.c ****                 // We use a temporary variable for the new real part to ensure the new
 689              		.loc 1 287 76 discriminator 1 view .LVU137
 690 0078 3200     		movs	r2, r6
 691 007a 3B00     		movs	r3, r7
 692 007c 3000     		movs	r0, r6
 693 007e 3900     		movs	r1, r7
 694 0080 FFF7FEFF 		bl	__aeabi_dmul
 695              	.LVL59:
 696 0084 0200     		movs	r2, r0
 697 0086 0B00     		movs	r3, r1
 698 0088 0292     		str	r2, [sp, #8]
 699 008a 0393     		str	r3, [sp, #12]
 287:Core/Src/main.c ****                 // We use a temporary variable for the new real part to ensure the new
 700              		.loc 1 287 67 discriminator 1 view .LVU138
 701 008c 0098     		ldr	r0, [sp]
 702 008e 0199     		ldr	r1, [sp, #4]
 703 0090 FFF7FEFF 		bl	__aeabi_dadd
 704              	.LVL60:
 287:Core/Src/main.c ****                 // We use a temporary variable for the new real part to ensure the new
 705              		.loc 1 287 47 discriminator 1 view .LVU139
 706 0094 0022     		movs	r2, #0
 707 0096 344B     		ldr	r3, .L32
 708 0098 FFF7FEFF 		bl	__aeabi_dcmple
 709              	.LVL61:
 710 009c 0028     		cmp	r0, #0
 711 009e C0D1     		bne	.L26
 712              	.L25:
 295:Core/Src/main.c ****             }
 296:Core/Src/main.c ****             mandelbrot_sum += iteration;
 713              		.loc 1 296 13 is_stmt 1 view .LVU140
 714              		.loc 1 296 28 is_stmt 0 view .LVU141
 715 00a0 4346     		mov	r3, r8
 716 00a2 0893     		str	r3, [sp, #32]
 717 00a4 DB17     		asrs	r3, r3, #31
 718 00a6 0993     		str	r3, [sp, #36]
 719 00a8 0C9B     		ldr	r3, [sp, #48]
 720 00aa 0D9C     		ldr	r4, [sp, #52]
 721 00ac 0899     		ldr	r1, [sp, #32]
 722 00ae 099A     		ldr	r2, [sp, #36]
 723 00b0 5B18     		adds	r3, r3, r1
 724 00b2 5441     		adcs	r4, r4, r2
 725 00b4 0C93     		str	r3, [sp, #48]
 726 00b6 0D94     		str	r4, [sp, #52]
 727              	.LVL62:
 728              		.loc 1 296 28 view .LVU142
 729              	.LBE16:
 277:Core/Src/main.c ****             // Map pixel coordinate to complex plane (c = c_real + i*c_imag)
 730              		.loc 1 277 37 is_stmt 1 discriminator 2 view .LVU143
 731 00b8 0A9B     		ldr	r3, [sp, #40]
 732              	.LVL63:
 277:Core/Src/main.c ****             // Map pixel coordinate to complex plane (c = c_real + i*c_imag)
 733              		.loc 1 277 37 is_stmt 0 discriminator 2 view .LVU144
 734 00ba 0133     		adds	r3, r3, #1
 735 00bc 0A93     		str	r3, [sp, #40]
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 20


 736              	.LVL64:
 737              	.L28:
 277:Core/Src/main.c ****             // Map pixel coordinate to complex plane (c = c_real + i*c_imag)
 738              		.loc 1 277 27 is_stmt 1 discriminator 1 view .LVU145
 739 00be 0A9B     		ldr	r3, [sp, #40]
 740 00c0 0B9A     		ldr	r2, [sp, #44]
 741 00c2 9342     		cmp	r3, r2
 742 00c4 36DA     		bge	.L30
 743              	.LBB18:
 279:Core/Src/main.c ****             double c_imag = ((double)y / height) * 2.0 - 1.0;
 744              		.loc 1 279 13 view .LVU146
 279:Core/Src/main.c ****             double c_imag = ((double)y / height) * 2.0 - 1.0;
 745              		.loc 1 279 30 is_stmt 0 view .LVU147
 746 00c6 0A98     		ldr	r0, [sp, #40]
 747 00c8 FFF7FEFF 		bl	__aeabi_i2d
 748              	.LVL65:
 749 00cc 0400     		movs	r4, r0
 750 00ce 0D00     		movs	r5, r1
 279:Core/Src/main.c ****             double c_imag = ((double)y / height) * 2.0 - 1.0;
 751              		.loc 1 279 40 view .LVU148
 752 00d0 0B98     		ldr	r0, [sp, #44]
 753 00d2 FFF7FEFF 		bl	__aeabi_i2d
 754              	.LVL66:
 755 00d6 0200     		movs	r2, r0
 756 00d8 0B00     		movs	r3, r1
 757 00da 2000     		movs	r0, r4
 758 00dc 2900     		movs	r1, r5
 759 00de FFF7FEFF 		bl	__aeabi_ddiv
 760              	.LVL67:
 279:Core/Src/main.c ****             double c_imag = ((double)y / height) * 2.0 - 1.0;
 761              		.loc 1 279 49 view .LVU149
 762 00e2 0022     		movs	r2, #0
 763 00e4 214B     		ldr	r3, .L32+4
 764 00e6 FFF7FEFF 		bl	__aeabi_dmul
 765              	.LVL68:
 279:Core/Src/main.c ****             double c_imag = ((double)y / height) * 2.0 - 1.0;
 766              		.loc 1 279 20 view .LVU150
 767 00ea 0022     		movs	r2, #0
 768 00ec 204B     		ldr	r3, .L32+8
 769 00ee FFF7FEFF 		bl	__aeabi_dsub
 770              	.LVL69:
 771 00f2 0490     		str	r0, [sp, #16]
 772 00f4 0591     		str	r1, [sp, #20]
 773              	.LVL70:
 280:Core/Src/main.c **** 
 774              		.loc 1 280 13 is_stmt 1 view .LVU151
 280:Core/Src/main.c **** 
 775              		.loc 1 280 30 is_stmt 0 view .LVU152
 776 00f6 5846     		mov	r0, fp
 777              	.LVL71:
 280:Core/Src/main.c **** 
 778              		.loc 1 280 30 view .LVU153
 779 00f8 FFF7FEFF 		bl	__aeabi_i2d
 780              	.LVL72:
 781 00fc 0400     		movs	r4, r0
 782 00fe 0D00     		movs	r5, r1
 280:Core/Src/main.c **** 
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 21


 783              		.loc 1 280 40 view .LVU154
 784 0100 5046     		mov	r0, r10
 785 0102 FFF7FEFF 		bl	__aeabi_i2d
 786              	.LVL73:
 787 0106 0200     		movs	r2, r0
 788 0108 0B00     		movs	r3, r1
 789 010a 2000     		movs	r0, r4
 790 010c 2900     		movs	r1, r5
 791 010e FFF7FEFF 		bl	__aeabi_ddiv
 792              	.LVL74:
 280:Core/Src/main.c **** 
 793              		.loc 1 280 50 view .LVU155
 794 0112 0200     		movs	r2, r0
 795 0114 0B00     		movs	r3, r1
 796 0116 FFF7FEFF 		bl	__aeabi_dadd
 797              	.LVL75:
 280:Core/Src/main.c **** 
 798              		.loc 1 280 20 view .LVU156
 799 011a 0022     		movs	r2, #0
 800 011c 154B     		ldr	r3, .L32+12
 801 011e FFF7FEFF 		bl	__aeabi_dsub
 802              	.LVL76:
 803 0122 0690     		str	r0, [sp, #24]
 804 0124 0791     		str	r1, [sp, #28]
 805              	.LVL77:
 282:Core/Src/main.c ****             double z_imag = 0.0;
 806              		.loc 1 282 13 is_stmt 1 view .LVU157
 283:Core/Src/main.c ****             int iteration = 0;
 807              		.loc 1 283 13 view .LVU158
 284:Core/Src/main.c **** 
 808              		.loc 1 284 13 view .LVU159
 287:Core/Src/main.c ****                 // We use a temporary variable for the new real part to ensure the new
 809              		.loc 1 287 13 view .LVU160
 284:Core/Src/main.c **** 
 810              		.loc 1 284 17 is_stmt 0 view .LVU161
 811 0126 0023     		movs	r3, #0
 812 0128 9846     		mov	r8, r3
 283:Core/Src/main.c ****             int iteration = 0;
 813              		.loc 1 283 20 view .LVU162
 814 012a 0026     		movs	r6, #0
 815 012c 0027     		movs	r7, #0
 282:Core/Src/main.c ****             double z_imag = 0.0;
 816              		.loc 1 282 20 view .LVU163
 817 012e 3400     		movs	r4, r6
 818 0130 3D00     		movs	r5, r7
 287:Core/Src/main.c ****                 // We use a temporary variable for the new real part to ensure the new
 819              		.loc 1 287 19 view .LVU164
 820 0132 97E7     		b	.L24
 821              	.LVL78:
 822              	.L30:
 287:Core/Src/main.c ****                 // We use a temporary variable for the new real part to ensure the new
 823              		.loc 1 287 19 view .LVU165
 824              	.LBE18:
 825              	.LBE15:
 276:Core/Src/main.c ****         for (int x = 0; x < width; x++) {
 826              		.loc 1 276 34 is_stmt 1 discriminator 2 view .LVU166
 827 0134 0E9B     		ldr	r3, [sp, #56]
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 22


 828              	.LVL79:
 276:Core/Src/main.c ****         for (int x = 0; x < width; x++) {
 829              		.loc 1 276 34 is_stmt 0 discriminator 2 view .LVU167
 830 0136 0133     		adds	r3, r3, #1
 831 0138 0E93     		str	r3, [sp, #56]
 832              	.LVL80:
 833              	.L23:
 276:Core/Src/main.c ****         for (int x = 0; x < width; x++) {
 834              		.loc 1 276 23 is_stmt 1 discriminator 1 view .LVU168
 835 013a 0E9B     		ldr	r3, [sp, #56]
 836 013c 0F9A     		ldr	r2, [sp, #60]
 837 013e 9342     		cmp	r3, r2
 838 0140 08DA     		bge	.L31
 839              	.LBB19:
 277:Core/Src/main.c ****             // Map pixel coordinate to complex plane (c = c_real + i*c_imag)
 840              		.loc 1 277 18 is_stmt 0 view .LVU169
 841 0142 0023     		movs	r3, #0
 842 0144 9A46     		mov	r10, r3
 843 0146 0E9B     		ldr	r3, [sp, #56]
 844 0148 9B46     		mov	fp, r3
 845 014a 5346     		mov	r3, r10
 846 014c 0A93     		str	r3, [sp, #40]
 847 014e 0F9B     		ldr	r3, [sp, #60]
 848 0150 9A46     		mov	r10, r3
 849 0152 B4E7     		b	.L28
 850              	.LVL81:
 851              	.L31:
 277:Core/Src/main.c ****             // Map pixel coordinate to complex plane (c = c_real + i*c_imag)
 852              		.loc 1 277 18 view .LVU170
 853              	.LBE19:
 854              	.LBE20:
 297:Core/Src/main.c ****         }
 298:Core/Src/main.c ****     }
 299:Core/Src/main.c ****     return mandelbrot_sum;
 855              		.loc 1 299 5 is_stmt 1 view .LVU171
 300:Core/Src/main.c **** }
 856              		.loc 1 300 1 is_stmt 0 view .LVU172
 857 0154 0C98     		ldr	r0, [sp, #48]
 858 0156 0D99     		ldr	r1, [sp, #52]
 859 0158 11B0     		add	sp, sp, #68
 860              		@ sp needed
 861              	.LVL82:
 862              		.loc 1 300 1 view .LVU173
 863 015a F0BC     		pop	{r4, r5, r6, r7}
 864 015c BB46     		mov	fp, r7
 865 015e B246     		mov	r10, r6
 866 0160 A946     		mov	r9, r5
 867 0162 A046     		mov	r8, r4
 868 0164 F0BD     		pop	{r4, r5, r6, r7, pc}
 869              	.L33:
 870 0166 C046     		.align	2
 871              	.L32:
 872 0168 00001040 		.word	1074790400
 873 016c 00000C40 		.word	1074528256
 874 0170 00000440 		.word	1074003968
 875 0174 0000F03F 		.word	1072693248
 876              		.cfi_endproc
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 23


 877              	.LFE48:
 879              		.section	.text.Error_Handler,"ax",%progbits
 880              		.align	1
 881              		.global	Error_Handler
 882              		.syntax unified
 883              		.code	16
 884              		.thumb_func
 886              	Error_Handler:
 887              	.LFB49:
 301:Core/Src/main.c **** 
 302:Core/Src/main.c **** /* USER CODE END 4 */
 303:Core/Src/main.c **** 
 304:Core/Src/main.c **** /**
 305:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 306:Core/Src/main.c ****   * @retval None
 307:Core/Src/main.c ****   */
 308:Core/Src/main.c **** void Error_Handler(void)
 309:Core/Src/main.c **** {
 888              		.loc 1 309 1 is_stmt 1 view -0
 889              		.cfi_startproc
 890              		@ Volatile: function does not return.
 891              		@ args = 0, pretend = 0, frame = 0
 892              		@ frame_needed = 0, uses_anonymous_args = 0
 893              		@ link register save eliminated.
 310:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 311:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 312:Core/Src/main.c ****   __disable_irq();
 894              		.loc 1 312 3 view .LVU175
 895              	.LBB21:
 896              	.LBI21:
 897              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 24


  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 25


  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 26


 898              		.loc 2 140 27 view .LVU176
 899              	.LBB22:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 900              		.loc 2 142 3 view .LVU177
 901              		.syntax divided
 902              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 903 0000 72B6     		cpsid i
 904              	@ 0 "" 2
 905              		.thumb
 906              		.syntax unified
 907              	.L35:
 908              	.LBE22:
 909              	.LBE21:
 313:Core/Src/main.c ****   while (1)
 910              		.loc 1 313 3 view .LVU178
 314:Core/Src/main.c ****   {
 315:Core/Src/main.c ****   }
 911              		.loc 1 315 3 view .LVU179
 313:Core/Src/main.c ****   while (1)
 912              		.loc 1 313 9 view .LVU180
 913 0002 FEE7     		b	.L35
 914              		.cfi_endproc
 915              	.LFE49:
 917              		.section	.text.SystemClock_Config,"ax",%progbits
 918              		.align	1
 919              		.global	SystemClock_Config
 920              		.syntax unified
 921              		.code	16
 922              		.thumb_func
 924              	SystemClock_Config:
 925              	.LFB45:
 159:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 926              		.loc 1 159 1 view -0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 64
 929              		@ frame_needed = 0, uses_anonymous_args = 0
 930 0000 00B5     		push	{lr}
 931              	.LCFI8:
 932              		.cfi_def_cfa_offset 4
 933              		.cfi_offset 14, -4
 934 0002 91B0     		sub	sp, sp, #68
 935              	.LCFI9:
 936              		.cfi_def_cfa_offset 72
 160:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 937              		.loc 1 160 3 view .LVU182
 160:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 938              		.loc 1 160 22 is_stmt 0 view .LVU183
 939 0004 3022     		movs	r2, #48
 940 0006 0021     		movs	r1, #0
 941 0008 04A8     		add	r0, sp, #16
 942 000a FFF7FEFF 		bl	memset
 943              	.LVL83:
 161:Core/Src/main.c **** 
 944              		.loc 1 161 3 is_stmt 1 view .LVU184
 161:Core/Src/main.c **** 
 945              		.loc 1 161 22 is_stmt 0 view .LVU185
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 27


 946 000e 1022     		movs	r2, #16
 947 0010 0021     		movs	r1, #0
 948 0012 6846     		mov	r0, sp
 949 0014 FFF7FEFF 		bl	memset
 950              	.LVL84:
 166:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 951              		.loc 1 166 3 is_stmt 1 view .LVU186
 166:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 952              		.loc 1 166 36 is_stmt 0 view .LVU187
 953 0018 0223     		movs	r3, #2
 954 001a 0493     		str	r3, [sp, #16]
 167:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 955              		.loc 1 167 3 is_stmt 1 view .LVU188
 167:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 956              		.loc 1 167 30 is_stmt 0 view .LVU189
 957 001c 013B     		subs	r3, r3, #1
 958 001e 0793     		str	r3, [sp, #28]
 168:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 959              		.loc 1 168 3 is_stmt 1 view .LVU190
 168:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 960              		.loc 1 168 41 is_stmt 0 view .LVU191
 961 0020 0F33     		adds	r3, r3, #15
 962 0022 0893     		str	r3, [sp, #32]
 169:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 963              		.loc 1 169 3 is_stmt 1 view .LVU192
 170:Core/Src/main.c ****   {
 964              		.loc 1 170 3 view .LVU193
 170:Core/Src/main.c ****   {
 965              		.loc 1 170 7 is_stmt 0 view .LVU194
 966 0024 04A8     		add	r0, sp, #16
 967 0026 FFF7FEFF 		bl	HAL_RCC_OscConfig
 968              	.LVL85:
 170:Core/Src/main.c ****   {
 969              		.loc 1 170 6 discriminator 1 view .LVU195
 970 002a 0028     		cmp	r0, #0
 971 002c 0DD1     		bne	.L39
 177:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 972              		.loc 1 177 3 is_stmt 1 view .LVU196
 177:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1;
 973              		.loc 1 177 31 is_stmt 0 view .LVU197
 974 002e 0723     		movs	r3, #7
 975 0030 0093     		str	r3, [sp]
 179:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 976              		.loc 1 179 3 is_stmt 1 view .LVU198
 179:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 977              		.loc 1 179 34 is_stmt 0 view .LVU199
 978 0032 0023     		movs	r3, #0
 979 0034 0193     		str	r3, [sp, #4]
 180:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 980              		.loc 1 180 3 is_stmt 1 view .LVU200
 180:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 981              		.loc 1 180 35 is_stmt 0 view .LVU201
 982 0036 0293     		str	r3, [sp, #8]
 181:Core/Src/main.c **** 
 983              		.loc 1 181 3 is_stmt 1 view .LVU202
 181:Core/Src/main.c **** 
 984              		.loc 1 181 36 is_stmt 0 view .LVU203
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 28


 985 0038 0393     		str	r3, [sp, #12]
 183:Core/Src/main.c ****   {
 986              		.loc 1 183 3 is_stmt 1 view .LVU204
 183:Core/Src/main.c ****   {
 987              		.loc 1 183 7 is_stmt 0 view .LVU205
 988 003a 0021     		movs	r1, #0
 989 003c 6846     		mov	r0, sp
 990 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 991              	.LVL86:
 183:Core/Src/main.c ****   {
 992              		.loc 1 183 6 discriminator 1 view .LVU206
 993 0042 0028     		cmp	r0, #0
 994 0044 03D1     		bne	.L40
 187:Core/Src/main.c **** 
 995              		.loc 1 187 1 view .LVU207
 996 0046 11B0     		add	sp, sp, #68
 997              		@ sp needed
 998 0048 00BD     		pop	{pc}
 999              	.L39:
 172:Core/Src/main.c ****   }
 1000              		.loc 1 172 5 is_stmt 1 view .LVU208
 1001 004a FFF7FEFF 		bl	Error_Handler
 1002              	.LVL87:
 1003              	.L40:
 185:Core/Src/main.c ****   }
 1004              		.loc 1 185 5 view .LVU209
 1005 004e FFF7FEFF 		bl	Error_Handler
 1006              	.LVL88:
 1007              		.cfi_endproc
 1008              	.LFE45:
 1010              		.section	.text.main,"ax",%progbits
 1011              		.align	1
 1012              		.global	main
 1013              		.syntax unified
 1014              		.code	16
 1015              		.thumb_func
 1017              	main:
 1018              	.LFB44:
  90:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1019              		.loc 1 90 1 view -0
 1020              		.cfi_startproc
 1021              		@ Volatile: function does not return.
 1022              		@ args = 0, pretend = 0, frame = 0
 1023              		@ frame_needed = 0, uses_anonymous_args = 0
 1024 0000 70B5     		push	{r4, r5, r6, lr}
 1025              	.LCFI10:
 1026              		.cfi_def_cfa_offset 16
 1027              		.cfi_offset 4, -16
 1028              		.cfi_offset 5, -12
 1029              		.cfi_offset 6, -8
 1030              		.cfi_offset 14, -4
  98:Core/Src/main.c **** 
 1031              		.loc 1 98 3 view .LVU211
 1032 0002 FFF7FEFF 		bl	HAL_Init
 1033              	.LVL89:
 105:Core/Src/main.c **** 
 1034              		.loc 1 105 3 view .LVU212
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 29


 1035 0006 FFF7FEFF 		bl	SystemClock_Config
 1036              	.LVL90:
 112:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1037              		.loc 1 112 3 view .LVU213
 1038 000a FFF7FEFF 		bl	MX_GPIO_Init
 1039              	.LVL91:
 115:Core/Src/main.c **** 
 1040              		.loc 1 115 3 view .LVU214
 1041 000e 154C     		ldr	r4, .L43
 1042 0010 0122     		movs	r2, #1
 1043 0012 0121     		movs	r1, #1
 1044 0014 2000     		movs	r0, r4
 1045 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1046              	.LVL92:
 118:Core/Src/main.c ****   
 1047              		.loc 1 118 3 view .LVU215
 118:Core/Src/main.c ****   
 1048              		.loc 1 118 16 is_stmt 0 view .LVU216
 1049 001a FFF7FEFF 		bl	HAL_GetTick
 1050              	.LVL93:
 118:Core/Src/main.c ****   
 1051              		.loc 1 118 14 discriminator 1 view .LVU217
 1052 001e 124D     		ldr	r5, .L43+4
 1053 0020 2860     		str	r0, [r5]
 121:Core/Src/main.c ****   //checksum = calculate_mandelbrot_double(IMAGE_WIDTH, IMAGE_HEIGHT, MAX_ITER);
 1054              		.loc 1 121 3 is_stmt 1 view .LVU218
 121:Core/Src/main.c ****   //checksum = calculate_mandelbrot_double(IMAGE_WIDTH, IMAGE_HEIGHT, MAX_ITER);
 1055              		.loc 1 121 14 is_stmt 0 view .LVU219
 1056 0022 8020     		movs	r0, #128
 1057 0024 4000     		lsls	r0, r0, #1
 1058 0026 6422     		movs	r2, #100
 1059 0028 0100     		movs	r1, r0
 1060 002a FFF7FEFF 		bl	calculate_mandelbrot_fixed_point_arithmetic
 1061              	.LVL94:
 121:Core/Src/main.c ****   //checksum = calculate_mandelbrot_double(IMAGE_WIDTH, IMAGE_HEIGHT, MAX_ITER);
 1062              		.loc 1 121 12 discriminator 1 view .LVU220
 1063 002e 0F4B     		ldr	r3, .L43+8
 1064 0030 1860     		str	r0, [r3]
 1065 0032 5960     		str	r1, [r3, #4]
 125:Core/Src/main.c **** 
 1066              		.loc 1 125 3 is_stmt 1 view .LVU221
 125:Core/Src/main.c **** 
 1067              		.loc 1 125 14 is_stmt 0 view .LVU222
 1068 0034 FFF7FEFF 		bl	HAL_GetTick
 1069              	.LVL95:
 125:Core/Src/main.c **** 
 1070              		.loc 1 125 12 discriminator 1 view .LVU223
 1071 0038 0D4B     		ldr	r3, .L43+12
 1072 003a 1860     		str	r0, [r3]
 128:Core/Src/main.c **** 
 1073              		.loc 1 128 3 is_stmt 1 view .LVU224
 128:Core/Src/main.c **** 
 1074              		.loc 1 128 29 is_stmt 0 view .LVU225
 1075 003c 2B68     		ldr	r3, [r5]
 1076 003e C01A     		subs	r0, r0, r3
 128:Core/Src/main.c **** 
 1077              		.loc 1 128 18 view .LVU226
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 30


 1078 0040 0C4B     		ldr	r3, .L43+16
 1079 0042 1860     		str	r0, [r3]
 131:Core/Src/main.c **** 
 1080              		.loc 1 131 3 is_stmt 1 view .LVU227
 1081 0044 0122     		movs	r2, #1
 1082 0046 0221     		movs	r1, #2
 1083 0048 2000     		movs	r0, r4
 1084 004a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1085              	.LVL96:
 134:Core/Src/main.c **** 
 1086              		.loc 1 134 3 view .LVU228
 1087 004e FA20     		movs	r0, #250
 1088 0050 8000     		lsls	r0, r0, #2
 1089 0052 FFF7FEFF 		bl	HAL_Delay
 1090              	.LVL97:
 138:Core/Src/main.c ****  
 1091              		.loc 1 138 3 view .LVU229
 1092 0056 0022     		movs	r2, #0
 1093 0058 0321     		movs	r1, #3
 1094 005a 2000     		movs	r0, r4
 1095 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 1096              	.LVL98:
 1097              	.L42:
 145:Core/Src/main.c ****   {
 1098              		.loc 1 145 3 view .LVU230
 150:Core/Src/main.c ****   /* USER CODE END 3 */
 1099              		.loc 1 150 3 view .LVU231
 145:Core/Src/main.c ****   {
 1100              		.loc 1 145 9 view .LVU232
 1101 0060 FEE7     		b	.L42
 1102              	.L44:
 1103 0062 C046     		.align	2
 1104              	.L43:
 1105 0064 00040048 		.word	1207960576
 1106 0068 00000000 		.word	start_time
 1107 006c 00000000 		.word	checksum
 1108 0070 00000000 		.word	end_time
 1109 0074 00000000 		.word	execution_time
 1110              		.cfi_endproc
 1111              	.LFE44:
 1113              		.global	checksum
 1114              		.section	.bss.checksum,"aw",%nobits
 1115              		.align	3
 1118              	checksum:
 1119 0000 00000000 		.space	8
 1119      00000000 
 1120              		.global	execution_time
 1121              		.section	.bss.execution_time,"aw",%nobits
 1122              		.align	2
 1125              	execution_time:
 1126 0000 00000000 		.space	4
 1127              		.global	end_time
 1128              		.section	.bss.end_time,"aw",%nobits
 1129              		.align	2
 1132              	end_time:
 1133 0000 00000000 		.space	4
 1134              		.global	start_time
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 31


 1135              		.section	.bss.start_time,"aw",%nobits
 1136              		.align	2
 1139              	start_time:
 1140 0000 00000000 		.space	4
 1141              		.global	IMAGE_HEIGHT
 1142              		.section	.rodata.IMAGE_HEIGHT,"a"
 1143              		.align	2
 1146              	IMAGE_HEIGHT:
 1147 0000 00010000 		.word	256
 1148              		.global	IMAGE_WIDTH
 1149              		.section	.rodata.IMAGE_WIDTH,"a"
 1150              		.align	2
 1153              	IMAGE_WIDTH:
 1154 0000 00010000 		.word	256
 1155              		.text
 1156              	.Letext0:
 1157              		.file 3 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 1158              		.file 4 "C:\\ST\\STM32CubeIDE_1.19.0\\STM32CubeIDE\\plugins\\com.st.stm32cube.ide.mcu.externaltool
 1159              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f051x8.h"
 1160              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 1161              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 1162              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 1163              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 1164              		.file 10 "<built-in>"
ARM GAS  C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s 			page 32


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:19     .text.MX_GPIO_Init:00000000 $t
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:114    .text.MX_GPIO_Init:0000005c $d
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:120    .text._close:00000000 $t
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:126    .text._close:00000000 _close
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:146    .text._lseek:00000000 $t
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:152    .text._lseek:00000000 _lseek
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:171    .text._read:00000000 $t
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:177    .text._read:00000000 _read
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:196    .text._write:00000000 $t
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:202    .text._write:00000000 _write
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:223    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 $t
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:229    .text.calculate_mandelbrot_fixed_point_arithmetic:00000000 calculate_mandelbrot_fixed_point_arithmetic
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:543    .text.calculate_mandelbrot_fixed_point_arithmetic:00000158 $d
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:561    .text.calculate_mandelbrot_double:00000000 $t
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:567    .text.calculate_mandelbrot_double:00000000 calculate_mandelbrot_double
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:872    .text.calculate_mandelbrot_double:00000168 $d
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:880    .text.Error_Handler:00000000 $t
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:886    .text.Error_Handler:00000000 Error_Handler
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:918    .text.SystemClock_Config:00000000 $t
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:924    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:1011   .text.main:00000000 $t
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:1017   .text.main:00000000 main
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:1105   .text.main:00000064 $d
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:1139   .bss.start_time:00000000 start_time
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:1118   .bss.checksum:00000000 checksum
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:1132   .bss.end_time:00000000 end_time
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:1125   .bss.execution_time:00000000 execution_time
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:1115   .bss.checksum:00000000 $d
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:1122   .bss.execution_time:00000000 $d
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:1129   .bss.end_time:00000000 $d
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:1136   .bss.start_time:00000000 $d
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:1146   .rodata.IMAGE_HEIGHT:00000000 IMAGE_HEIGHT
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:1143   .rodata.IMAGE_HEIGHT:00000000 $d
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:1153   .rodata.IMAGE_WIDTH:00000000 IMAGE_WIDTH
C:\Users\0geda\AppData\Local\Temp\ccBbUILh.s:1150   .rodata.IMAGE_WIDTH:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
__aeabi_lmul
__aeabi_ldivmod
__aeabi_i2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_dadd
__aeabi_dcmple
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_GetTick
HAL_Delay
